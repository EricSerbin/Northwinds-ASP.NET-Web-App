@model IEnumerable<WebApplication1.Data.Model.ModelDB.Order>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="//cdn.datatables.net/2.1.8/css/dataTables.dataTables.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<style>
    .align-left {
        margin-left: 0;
        margin-right: auto;
    }
</style>

<ul class="nav nav-tabs" id="myTab" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Entries</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">Bar Graph</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="contact-tab" data-bs-toggle="tab" data-bs-target="#contact-tab-pane" type="button" role="tab" aria-controls="contact-tab-pane" aria-selected="false">Radar Graph</button>
    </li>


</ul>

<div class="tab-content" id="myTabContent">
    <h2 class="btn" data-bs-toggle="popover" title="Popover title" data-bs-content="And here's some amazing content. It's very engaging. Right?">Popup Example</h2>
    <div class="tab-pane fade show active" id="home-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">

        <table id="mytable" class="table table-striped table-borderless collapse-horizontal align-left">
            <thead>
                <tr>
                    <th></th>
                    <th>
                        @Html.DisplayNameFor(model => model.CustomerID)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.OrderDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.RequiredDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShippedDate)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Freight)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShipName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShipAddress)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShipCity)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShipRegion)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShipPostalCode)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.ShipCountry)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Employee.LastName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Shipper.CompanyName)
                    </th>
                    <th></th>
                </tr>
            </thead>
            <tbody>

                @foreach (var item in Model)
                {
                    <tr>
                        <td style="white-space:nowrap">
                            <div class="btnOrders btn btn-dark" data-filler="@item.OrderID" style="">Retrieve Orders</div>
                            @Html.ActionLink("Edit", "Edit", new { id = item.OrderID }, new { @class = "btn btn-success" }) |
                            @Html.ActionLink("Details", "Details", new { id = item.OrderID }, new { @class = "btn btn-warning" }) |

                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.CustomerID)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.OrderDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.RequiredDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShippedDate)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Freight)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShipName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShipAddress)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShipCity)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShipRegion)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShipPostalCode)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ShipCountry)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Employee.LastName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Shipper.CompanyName)
                        </td>
                        <td>
                            @Html.ActionLink("Delete", "Delete", new { id = item.OrderID })
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="profile-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">
        <div>
            <canvas id='myChart'></canvas>
        </div>
    </div>
    <div class="tab-pane fade" id="contact-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">
        <div>
            <canvas id='secondaryChart'></canvas>
        </div>
    </div>


</div>

@section Scripts{

    <script src="//cdn.datatables.net/2.1.8/js/dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://www.unpkg.com/chartjs-chart-geo@4.3.4/build/index.umd.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <script>

        $(document).ready(function () {
            //let table = new DataTable("#mytable")
            $('#mytable').dataTable({
                'columnDefs': [{ 'orderable': false, 'targets': [0, 12] }],
                'aaSorting': [[1, 'asc']],
                /*'pageLength': 10,
                'lengthMenu': [10, 25, 50, 100]*/
            });



            $.ajax({
                    url: '@Url.Action("GetOrdersJson", "Order")',
                    method: 'GET',
                    success: function (data) {

                        parsedData = JSON.parse(data);

                        var dataParsedOrderID = parsedData.map(function (item) { return item.OrderID; });
                        var dataParsedCustomerID = parsedData.map(function (item) { return item.CustomerID; });
                        var dataParsedEmployeeID = parsedData.map(function (item) { return item.EmployeeID; });
                        var dataParsedOrderDate = parsedData.map(function (item) { return item.OrderDate; });
                        var dataParsedRequiredDate = parsedData.map(function (item) { return item.RequiredDate; });
                        var dataParsedShippedDate = parsedData.map(function (item) { return item.ShippedDate; });
                        var dataParsedShipVia = parsedData.map(function (item) { return item.ShipVia; });
                        var dataParsedFreight = parsedData.map(function (item) { return item.Freight; });
                        var dataParsedShipName = parsedData.map(function (item) { return item.ShipName; });
                        var dataParsedShipAddress = parsedData.map(function (item) { return item.ShipAddress; });
                        var dataParsedShipCity = parsedData.map(function (item) { return item.ShipCity; });
                        var dataParsedShipRegion = parsedData.map(function (item) { return item.ShipRegion; });
                        var dataParsedShipPostalCode = parsedData.map(function (item) { return item.ShipPostalCode; });
                        var dataParsedShipCountry = parsedData.map(function (item) { return item.ShipCountry;});

                        var ctx = document.getElementById('myChart');

                        var secondaryChart = new Chart(ctx, {
                            type: 'scatter',
                            data: {
                                labels: dataParsedOrderID,
                                //labels: dataParsedOrderDate,
                                color: dataParsedShipCountry,
                                //labels: ['red', 'blue', 'yellow'],

                                datasets:
                                    [
                                        {
                                            label: 'Freight Quantity',
                                            data: dataParsedFreight,
                                            parsing: {
                                                yAxisKey: 'Freight'
                                            }
                                        },
                                        {
                                            label: 'Ship Name',
                                            data: dataParsedShipName,
                                            parsing: {
                                                yAxisKey: 'ShipName'
                                            }
                                        },
                                        //backgroundColor: dataParsedShipCountry, 
                                        /*{
                                            label: 'Unit Price',
                                            data: dataParsedPrices,
                                            parsing: {
                                                yAxisKey: 'UnitPrice'
                                            }
                                        },*/
                                        /*{
                                            label: 'Order Data',
                                            data: dataParsedOrderDate,
                                            parsing: {
                                                yAxisKey: 'OrderDate'
                                            }
                                        },*/
                                        /*{
                                            label: 'Ship Via',
                                            data: dataParsedShipVia,
                                            parsing: {
                                                yAxisKey: 'ShipVia'
                                            }
                                        },*/
                                        

                                    ]

                            }
                            ,options: {
                                /*scales:{
                                    x:{
                                        type: 'time',
                                        time:{
                                            unit: 'day',
                                            displayFormats:{
                                                day: 'MM/DD/YYYY hh:mm:ss'
                                                }
                                        },
                                        title: {
                                            display: true,
                                            text: 'order date'
                                        }
                                    },
                                    y: {
                                        beginAtZero: true,
                                        title: {
                                            display: true,
                                            text: 'Freight Quantity'
                                        }
                                    }
                                }*/
                           }
                        });
                    },
                    error: function(error) {
                        alert("error result is " + error);
                    }

            });


            //second chart radar (not useful)

            $.ajax({
                url: '@Url.Action("GetOrdersJson", "Order")',
                method: 'GET',
                success: function (data) {

                    parsedData = JSON.parse(data);

                    var dataParsedOrderID = parsedData.map(function (item) { return item.OrderID; });
                    var dataParsedCustomerID = parsedData.map(function (item) { return item.CustomerID; });
                    var dataParsedEmployeeID = parsedData.map(function (item) { return item.EmployeeID; });
                    var dataParsedOrderDate = parsedData.map(function (item) { return item.OrderDate; });
                    var dataParsedRequiredDate = parsedData.map(function (item) { return item.RequiredDate; });
                    var dataParsedShippedDate = parsedData.map(function (item) { return item.ShippedDate; });
                    var dataParsedShipVia = parsedData.map(function (item) { return item.ShipVia; });
                    var dataParsedFreight = parsedData.map(function (item) { return item.Freight; });
                    var dataParsedShipName = parsedData.map(function (item) { return item.ShipName; });
                    var dataParsedShipAddress = parsedData.map(function (item) { return item.ShipAddress; });
                    var dataParsedShipCity = parsedData.map(function (item) { return item.ShipCity; });
                    var dataParsedShipRegion = parsedData.map(function (item) { return item.ShipRegion; });
                    var dataParsedShipPostalCode = parsedData.map(function (item) { return item.ShipPostalCode; });
                    var dataParsedShipCountry = parsedData.map(function (item) { return item.ShipCountry;});

                    var ctx = document.getElementById('secondaryChart');

                    var secondaryChart = new Chart(ctx, {
                        type: 'radar',
                        data: {
                            labels: dataParsedOrderID,
                            //labels: ['red', 'blue', 'yellow'],

                            datasets:[
                                    {
                                        label: 'Ship Name',
                                        data: dataParsedShipName,
                                        parsing: {
                                            yAxisKey: 'ShipName'
                                        }
                                    },
                                    /*{
                                        label: 'Unit Price',
                                        data: dataParsedPrices,
                                        parsing: {
                                            yAxisKey: 'UnitPrice'
                                        }
                                    },*/
                                    /*{
                                        label: 'Order Data',
                                        data: dataParsedOrderDate,
                                        parsing: {
                                            yAxisKey: 'OrderDate'
                                        }
                                    },*/
                                    {
                                        label: 'Ship Via',
                                        data: dataParsedShipVia,
                                        parsing: {
                                            yAxisKey: 'ShipVia'
                                        }
                                    }]

                                },
                                options: {
                                    scales: {
                                        y: {
                                            beginAtZero: true
                                        }
                                    }
                                }
                            });
                        },
                    error: function(error) {
                            alert("error result is " + error);

                        }

                    });


        });
        //table.columns.adjust().draw();
        //$('#mytable').table.columns.adjust().draw();

    </script>

}
