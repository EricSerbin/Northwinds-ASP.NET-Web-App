@model IEnumerable<WebApplication1.Data.Model.ModelDB.Supplier>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<link href="//cdn.datatables.net/2.1.8/css/dataTables.dataTables.min.css" rel="stylesheet" />
<link rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">


<h2 class="emphasized">Index</h2>

<p>
    @*@Html.ActionLink("Create New", "Create")*@
    @Html.ActionLink("Create New", "Create", null, new { @class = "btn btn-info" })
</p>
<table id="mytable" class="table table-striped table-borderless collapse-horizontal">
    <thead>


        <tr>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.CompanyName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ContactName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ContactTitle)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Address)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.City)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Region)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PostalCode)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Country)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Phone)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Fax)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.HomePage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Longitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Latitude)
            </th>


            <th></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model)
        {
            <tr>
                <td style="white-space:nowrap">
                    <div class="btnSupplies btn btn-dark" data-filler="@item.SupplierID" style="">Retrieve Products</div>
                    @Html.ActionLink("Edit", "Edit", new { id = item.SupplierID }, new { @class = "btn btn-success" }) |
                    @Html.ActionLink("Details", "Details", new { id = item.SupplierID }, new { @class = "btn btn-warning" }) |

                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CompanyName)
                </td>
                <td>
                    @*<div class="btnEdit text-info" data-id="@item.SupplierID">@item.ContactName</div>*@
                    <div data-namebyid="@item.SupplierID">@item.ContactName </div>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ContactTitle)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Address)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.City)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Region)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PostalCode)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Country)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Phone)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Fax)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.HomePage)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td>
                    @Html.ActionLink("Delete", "Delete", new { id = item.SupplierID }, new { @class = "btn btn-danger", @style = "font-weight:600" })

                </td>
            </tr>
        }
    </tbody>
</table>
<div class="modal" id="supplierModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Contact Editor</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            @*//"{"ProductID":0,"ProductName":"Côte de Blaye","SupplierID":null,"CategoryID":null,"QuantityPerUnit":"12 - 75 cl bottles",
                "UnitPrice":263.5000,"UnitsInStock":17,"UnitsOnOrder":0,"ReorderLevel":null,"Discontinued":false,"Category":null,
                "Order_Details":[],"Supplier":null}" JSON format*@
            <div class="modal-body">
                <div class="container">
                    <table class="table table-striped" id="tblSupplier">
                    </table>


                </div>

            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                @*<button id="btnReturn" type="button" class="btn btn-primary">Return/Send Supplies</button>*@
                <button id="btnReturn" type="button" class="btn btn-primary">Edit Supplier</button>
            </div>
        </div>
    </div>
</div>
<div>
    <canvas id='worldChart'></canvas>
</div>
<div>
    <canvas id='myChart'></canvas>
</div>
<div>
    <canvas id='secondaryChart'></canvas>
</div>


@section Scripts{
    <script src="//cdn.datatables.net/2.1.8/js/dataTables.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://www.unpkg.com/chartjs-chart-geo@4.3.4/build/index.umd.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script> @*May be unnecessary*@

    @*<script src="https://www.unpkg.com/world-atlas@2.0.2/countries-50m.json"></script>*@

<script>


        //});

        $(document).ready(function(){
             //geo chart

                const url = 'https://www.unpkg.com/world-atlas@2.0.2/countries-50m.json';
                fetch(url).then((result) => result.json()).then((datapoint) => {
                    const countries = ChartGeo.topojson.feature(datapoint, datapoint.objects.countries).features;

                    console.log(countries[0].properties.name);

                    const data = {
                    labels: countries.map(country => country.properties.name),
                    datasets: [{
                        label: 'Countries',
                        data: countries.map(country => ({feature: country, value: Math.random()
                            })),
                        order: 1
                        }]
                    }; //closes data

                    const config = {
                        type: 'choropleth',
                        data,
                        options: {
                            showOutline: true,
                            showGraticule: false,
                            scales: {
                                projection:{
                                    axis: 'xy',
                                    projection: 'equalEarth'
                                },
                                /*projectionScale:1*/
                            },
                            onClick: (evt, elems) => {
                                console.log(elems.map((elem) => elem.element.feature.properties.name));
                            },
                            plugins: {

                                ChartDataLabels,
                                legend: {
                                    display: false
                                },
                                tooltip: {
                                    callbacks: {
                                        label: function (context) {
                                            const dataIndex = context.dataIndex;
                                            const dataset = context.dataset;
                                            const dataItem = dataset.data[dataIndex];
                                            if (dataset.type === 'bubbleMap') {
                                                return `${dataItem.label}`;
                                            }
                                            else {
                                                return `${dataItem.feature.properties.name}`;
                                            }
                                        }
                                    }
                                }
                            },

                        },
                    }; //closes config
                    const worldChart = new Chart(document.getElementById('worldChart').getContext("2d"),config);

                    $.ajax({
                        url: "@Url.Action("GetSuppliersJson", "Supplier")",
                        method: 'GET',
                        success: function (data) {

                            const parsedGeoData = JSON.parse(data);

                            parsedGeoData.forEach(item => {
                                console.log(`Latitude: ${item.Latitude}, Longitude: ${item.Longitude}`, `SupplierID: ${item.SupplierID}`,`ContactName: ${item.ContactName}`, `CompanyName: ${item.CompanyName}`);

                            });

                            const bubbleData = parsedGeoData.map(item => ({
                                latitude: item.Latitude,
                                longitude: item.Longitude,
                                radius: 10,
                                label: `${item.CompanyName} ${item.ContactName} | ${item.Address}, ${item.City}, ${item.Region} ${item.Country}`
                            }));

                            const bubbleDataset = {
                                type: 'bubbleMap',
                                label: 'Supplier Locations',

                                data: bubbleData.map(item => ({
                                    x: item.longitude,
                                    y: item.latitude,
                                    r: item.radius,
                                    label: item.label
                                    //r: item.radius //r is for regular bubble chart while value is used for bubble chart interface
                                })),

                                backgroundColor: 'rgba(255,98,140,.5)',
                                borderColor: 'rgba(255,98,140,1)',
                                borderWidth: 1,
                                hoverBackgroundColor: 'rgba(255, 99, 132, 0.7)',
                                hoverBorderColor: 'rgba(255, 99, 132, 1)',
                                hoverBorderWidth: 2,
                                order: 0

                            };

                            worldChart.data.datasets.push(bubbleDataset);
                            worldChart.update();
                        },
                        error: function (error) {
                            alert("worldChart error has occured: " + error);
                        },

                    });


                });//closes
            //Second Chart

             $.ajax({

                 url: '@Url.Action("GetSuppliersJson", "Supplier")',
                 method: 'GET',
                 success: function (data) {
                     //alert("success is true");
                     //"[{\"SupplierID\":1,\"CompanyName\":\"Exotic Liquids\",\"ContactName\":\"Charlotte Cooper\",\"ContactTitle\":\"Purchasing Manager\",\"Address\":\"49 Gilbert St.\",\"City\":\"London\",\"Region\":null,\"PostalCode\":\"EC1 4SD\",\"Country\":\"UK\",\"Phone\":\"(171) 555-2222\",\"Fax\":null,\"HomePage\":null},{\"SupplierID\":2,\"CompanyName\":\"New Orleans Cajun Delights\",\"ContactName\":\"Shelley Burke\",\"ContactTitle\":\"Order Administrator\",\"Address\":\"P.O. Box 78934\",\"City\":\"New Orleans\",\"Region\":\"LA\",\"PostalCode\":\"70117\",\"Country\":\"USA\",\"Phone\":\"(100) 555-4822\",\"Fax\":null,\"HomePage\":\"#CAJUN.HTM#\"},{\"SupplierID\":3,\"CompanyName\":\"Grandma Kelly's Homestead\",\"ContactName\":\"Regina Murphy\",\"ContactTitle\":\"Sales Representative\",\"Address\":\"707 Oxford Rd.\",\"City\":\"Ann Arbor\",\"Region\":\"MI\",\"PostalCode\":\"48104\",\"Country\":\"USA\",\"Phone\":\"(313) 555-5735\",\"Fax\":\"(313) 555-3349\",\"HomePage\":null},{\"SupplierID\":4,\"CompanyName\":\"Tokyo Traders\",\"ContactName\":\"Yoshi Nagase\",\"ContactTitle\":\"Marketing Manager\",\"Address\":\"9-8 Sekimai Musashino-shi\",\"City\":\"Tokyo\",\"Region\":null,\"Postal..."
                     var parsedData = JSON.parse(data);

                     var dataParsedCompanyName= parsedData.map(function(item){return item.CompanyName;});
                     //alert("data parsed company name is "+dataParsedCompanyName);
                     var dataParsedCity = parsedData.map(function(item){return item.City;});
                     var dataParsedCountry = parsedData.map(function(item){return item.Country;});
                     var dataParsedAddress = parsedData.map(function(item){return item.Address;});
                     var dataParsedPhone = parsedData.map(function(item){return item.Phone;});
                     var dataParsedContactName = parsedData.map(function(item){return item.ContactName;});


                     //alert("data parsed country is "+dataParsedCountry);
                     //alert("data parsed city is "+ dataParsedCity);
                     var ctx = document.getElementById('myChart');

                     var myChart = new Chart(ctx, {
                         type: 'bar',
                         data: {
                             labels: dataParsedCompanyName,
                             //labels: ['red', 'blue', 'yellow'],

                             datasets: [{
                                 label: 'City',
                                 data: dataParsedCity,
                                 parsing: {
                                     yAxisKey: 'City'
                                 }
                             },
                                 /*{
                                     label: 'Phone',
                                     data: dataParsedPhone,
                                     parsing: {
                                         yAxisKey: 'Phone'
                                     }
                                 },*/
                             {
                                 label: 'Country',
                                 data: dataParsedCountry,
                                 parsing: {
                                     yAxisKey: 'Country'
                                 }
                             },
                             {
                                 label: 'Address',
                                 data: dataParsedAddress,
                                 parsing: {
                                     yAxisKey: 'Address'
                                 }
                             },

                             {
                                 label: 'Contact Name',
                                 data: dataParsedContactName,
                                 parsing: {
                                     yAxisKey: 'ContactName'
                                 }
                             }]

                         },
                         options: {
                             showOutline: true,
                             showGraticule: true,
                             scales: {
                                 projection: 'equalEarth',

                             },
                         },
                         onClick: (evt, elems) => {
                             console.log(elems.map((elem) => elem.element.feature.properties.name));
                         },

                     });
                 },
                 error: function(error) {
                     alert("error result is " + error);

                 }

             });
             //Second Chart
             @*$.ajax({

                url: '@Url.Action("GetSuppliersJson", "Supplier")',
                method: 'GET',
                success: function (data) {
                    //alert("success is true");
                    //"[{\"SupplierID\":1,\"CompanyName\":\"Exotic Liquids\",\"ContactName\":\"Charlotte Cooper\",\"ContactTitle\":\"Purchasing Manager\",\"Address\":\"49 Gilbert St.\",\"City\":\"London\",\"Region\":null,\"PostalCode\":\"EC1 4SD\",\"Country\":\"UK\",\"Phone\":\"(171) 555-2222\",\"Fax\":null,\"HomePage\":null},{\"SupplierID\":2,\"CompanyName\":\"New Orleans Cajun Delights\",\"ContactName\":\"Shelley Burke\",\"ContactTitle\":\"Order Administrator\",\"Address\":\"P.O. Box 78934\",\"City\":\"New Orleans\",\"Region\":\"LA\",\"PostalCode\":\"70117\",\"Country\":\"USA\",\"Phone\":\"(100) 555-4822\",\"Fax\":null,\"HomePage\":\"#CAJUN.HTM#\"},{\"SupplierID\":3,\"CompanyName\":\"Grandma Kelly's Homestead\",\"ContactName\":\"Regina Murphy\",\"ContactTitle\":\"Sales Representative\",\"Address\":\"707 Oxford Rd.\",\"City\":\"Ann Arbor\",\"Region\":\"MI\",\"PostalCode\":\"48104\",\"Country\":\"USA\",\"Phone\":\"(313) 555-5735\",\"Fax\":\"(313) 555-3349\",\"HomePage\":null},{\"SupplierID\":4,\"CompanyName\":\"Tokyo Traders\",\"ContactName\":\"Yoshi Nagase\",\"ContactTitle\":\"Marketing Manager\",\"Address\":\"9-8 Sekimai Musashino-shi\",\"City\":\"Tokyo\",\"Region\":null,\"Postal..."
                    var parsedData = JSON.parse(data);

                    var dataParsedCompanyName= parsedData.map(function(item){return item.CompanyName;});
                    //alert("data parsed company name is "+dataParsedCompanyName);
                    var dataParsedCity = parsedData.map(function(item){return item.City;});
                    var dataParsedCountry = parsedData.map(function(item){return item.Country;});
                    var dataParsedAddress = parsedData.map(function(item){return item.Address;});
                    var dataParsedPhone = parsedData.map(function(item){return item.Phone;});
                    var dataParsedContactName = parsedData.map(function(item){return item.ContactName;});


                    //alert("data parsed country is "+dataParsedCountry);
                    //alert("data parsed city is "+ dataParsedCity);
                    var ctx = document.getElementById('secondaryChart')

                    var myChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: dataParsedCompanyName,
                            //labels: ['red', 'blue', 'yellow'],

                            datasets: [{
                                label: 'City',
                                data: dataParsedCity,
                                parsing: {
                                    yAxisKey: 'City'
                                }
                            },
                            {
                                label: 'Country',
                                data: dataParsedCountry,
                                parsing: {
                                    yAxisKey: 'Country'
                                }
                            },
                            {
                                label: 'Address',
                                data: dataParsedAddress,
                                parsing: {
                                    yAxisKey: 'Address'
                                }
                            },

                            {
                                label: 'Contact Name',
                                data: dataParsedContactName,
                                parsing: {
                                    yAxisKey: 'ContactName'
                                }
                            }]

                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true
                                }
                            }
                        }
                    });
                },
                error: function(error) {
                    alert("error result is " + error);

                }

            });
*@
        })
        var _id = "";
        $(".btnSupplies").on("click", function () {
       /* $("#btnEdit").on("click", function () {*/

            /*console.log($("#inputName").val());
            console.log($("#inputTitle").val());*/
            /*var name = $("#inputName").val();
            var title = $("#inputTitle").val();*/

            var id = "";
            id = $(this).data("filler");
            _id = id;
            console.log("id is " + id);

            var title = $('[data-namebyid="' + id + '"]').text();
            var titleRef = $('[data-namebyid="' + id + '"]');

            console.log(title); //name
            console.log(titleRef); //jquery fn init of length, prototype object
            console.log(id); //ID
            console.log("break point");
            $("#supplierModal").modal("show");
            //$('div[data-namebyid="' + id + '"]').each(function())
            //console.log($('[data-namebyid="' + id + '"]')
            console.log("data nameID");
            console.log($('[data-namebyid="' + id + '"]'));


            //$("#supplierModal").modal("show");

            $('div[data-namebyid="' + id + '"]').each(function () {
                /*alert("id is " + id);*/
                console.log(id);
            });

            $.ajax({
                url: "/supplier/returnsupplierinfo",
                type: "GET",
                data: {

                    id: id
                },
                dataType: "json",
                success: function (result) {

                    /*
                    var infoModal = jQuery("#supplierModal");
                    infoModal.find('modal-body').html(result[0].ProductName);*/

                    var buildTable = "<tr><th> Product Name </th><th> Quantity Per Unit </th><th> Units In Stock </th></tr>";

                    $.each(result, function (i,v) {
                        buildTable += "<tr><td>" + v.productName + "</td>" + "<td>" + v.quantityPerUnit + "</td>" + "<td>" + v.unitsInStock + "</td></tr>";
                        console.log(v);
                    });

                    $("#tblSupplier").html(buildTable);



                    //debugger           //ask about data transfer objects, object serialization and when to use custom serializers, when to modify global jsonserializer vs local, etc.
                    console.log("this is the function result")
                    console.log(result);

                   // if (result == true) {
                       /* $("#customerModal").modal("hide");*/
                        /*$('[data-id="' + _id + '"]').text(name);*/
                        //$('[data-titlebyid="' + _id + '"]').text(title);
                            @* window.location = "@Url.Content( "~/customer")";*@

                  //  }
                },

                error: function (xhr, status, error) {
                    alert("error");
                    console.log("this is the error result")
                    console.log(result);
                },



            });

        });


        $('#mytable').dataTable({

            //'columnDefs': [{ 'orderable': false, 'targets': [0, 12] }], // hide sort icon on header of first column

            'columnDefs': [{ 'orderable': false, 'targets': [0, 14] }], // hide sort icon on header of first column

            'aaSorting': [[1, 'asc']] // start to sort data in second column

        });
        //        $(".btnSupplies").on("click", function () {
        $("#btnReturn").on("click", function () {

            var id = "";
            id = _id;
            //id = $(this).data("filler");
            console.log("id is " + id);

            ".btnSupplies"
            window.location.href = '@Url.Content( "~/supplier/edit/")'+id;
        });

</script>
}

@*//build another index ppage for supplies (done), have another button for producst
    //that oepsnt he modals, and list out all the pproducts that supplier has, like where supplier.ID = 1
    //and return the product names, stuff that fits into a small modal*@